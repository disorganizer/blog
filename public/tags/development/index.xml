<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on brig devlog</title>
    <link>https://disorganizer.github.io/blog/tags/development/</link>
    <description>Recent content in Development on brig devlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 11 Feb 2016 19:26:59 +0100</lastBuildDate>
    <atom:link href="https://disorganizer.github.io/blog/tags/development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Source Layout</title>
      <link>https://disorganizer.github.io/blog/post/source_layout/</link>
      <pubDate>Thu, 11 Feb 2016 19:26:59 +0100</pubDate>
      
      <guid>https://disorganizer.github.io/blog/post/source_layout/</guid>
      <description>&lt;p&gt;Hi there. Today&amp;rsquo;s blog post is a unsorted notepad of how &lt;code&gt;brig&lt;/code&gt;&amp;rsquo;s source is
currently layout and what the big picture behind is supposed to look like.&lt;/p&gt;

&lt;p&gt;Now that &lt;code&gt;brig&lt;/code&gt; is already a mid-sized codebase (when did we get to 7k lines
of code?), it might be worthwhile to show what packages we have and how they
interact. Here&amp;rsquo;s the &lt;code&gt;tree(1)&lt;/code&gt; output of the git repository at the time of
writing. I allowed myself to reduce it to the most relevant files, also skipping
tests and rather unimportant subdirectories:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$ tree &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; grep -v &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;unimportant&amp;#39;&lt;/span&gt; .
â”œâ”€â”€ doc.go            &lt;span style=&#34;color: #75715e&#34;&gt;# Top-level documentation.&lt;/span&gt;
â”œâ”€â”€ Makefile          &lt;span style=&#34;color: #75715e&#34;&gt;# Makefile with often used tools.&lt;/span&gt;
â”œâ”€â”€ brig              &lt;span style=&#34;color: #75715e&#34;&gt;# Source of the `brig` binary...&lt;/span&gt;
â”‚Â Â  â””â”€â”€ brig.go       &lt;span style=&#34;color: #75715e&#34;&gt;# ...which just calls into cmdline.*&lt;/span&gt;
â”œâ”€â”€ cmdline           &lt;span style=&#34;color: #75715e&#34;&gt;# Actual implementation of the cli.&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ handlers.go   &lt;span style=&#34;color: #75715e&#34;&gt;# Handler function for each subcommand.&lt;/span&gt;
â”‚Â Â  â””â”€â”€ parser.go     &lt;span style=&#34;color: #75715e&#34;&gt;# Subcommand definitions are in here.&lt;/span&gt;
â”œâ”€â”€ daemon            &lt;span style=&#34;color: #75715e&#34;&gt;# Implement the daemon/client process and io.&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ client.go     &lt;span style=&#34;color: #75715e&#34;&gt;# client side daemon io.&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ server.go     &lt;span style=&#34;color: #75715e&#34;&gt;# Server side daemon io.&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ handlers.go   &lt;span style=&#34;color: #75715e&#34;&gt;# Server handler for each daemon command.&lt;/span&gt;
â”‚Â Â  â””â”€â”€ operations.go &lt;span style=&#34;color: #75715e&#34;&gt;# Client handler for each daemon command.&lt;/span&gt;
â”œâ”€â”€ fuse              &lt;span style=&#34;color: #75715e&#34;&gt;# Implementation of `brigfs`&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ directory.go  &lt;span style=&#34;color: #75715e&#34;&gt;# Logic for directory nodes.&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ entry.go      &lt;span style=&#34;color: #75715e&#34;&gt;# Logic for regular files.&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ handle.go     &lt;span style=&#34;color: #75715e&#34;&gt;# Logic for open()&amp;#39;d nodes.&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ fs.go         &lt;span style=&#34;color: #75715e&#34;&gt;# Filesystem entry; defines the root node.&lt;/span&gt;
â”‚Â Â  â””â”€â”€ mount.go      &lt;span style=&#34;color: #75715e&#34;&gt;# Mount utility.&lt;/span&gt;
â”œâ”€â”€ im                &lt;span style=&#34;color: #75715e&#34;&gt;# XMPP communication layer.&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ client.go     &lt;span style=&#34;color: #75715e&#34;&gt;# A generic otr-enabled xmpp client.&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ finger.go     &lt;span style=&#34;color: #75715e&#34;&gt;# Fingerprint and key storage of each user.&lt;/span&gt;
â”œâ”€â”€ repo              &lt;span style=&#34;color: #75715e&#34;&gt;# Code for filesystem repository handling.&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ config/       &lt;span style=&#34;color: #75715e&#34;&gt;# Config value retrieval and default config.&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ global/       &lt;span style=&#34;color: #75715e&#34;&gt;# Global config handling (~/.brig/)&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ id.go         &lt;span style=&#34;color: #75715e&#34;&gt;# File locking (TODO: move to open.go?)&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ init.go       &lt;span style=&#34;color: #75715e&#34;&gt;# Code to initialize a new empty repo.&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ locate.go     &lt;span style=&#34;color: #75715e&#34;&gt;# Tool to find the repo root path.&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ open.go       &lt;span style=&#34;color: #75715e&#34;&gt;# Code to lock/unlock a repository.&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ pwd.go        &lt;span style=&#34;color: #75715e&#34;&gt;# Password handling.&lt;/span&gt;
â”‚Â Â  â””â”€â”€ repo.go       &lt;span style=&#34;color: #75715e&#34;&gt;# The repository structure itself.&lt;/span&gt;
â”œâ”€â”€ store             &lt;span style=&#34;color: #75715e&#34;&gt;# The actual core: file structs and ipfs handling.&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ compress/     &lt;span style=&#34;color: #75715e&#34;&gt;# Seekable compression IO Layer using snappy.&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ encrypt/      &lt;span style=&#34;color: #75715e&#34;&gt;# Seekable encryption IO Layer.&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ format-util/  &lt;span style=&#34;color: #75715e&#34;&gt;# Compress&amp;amp;Encryption util for brigs file format.&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ commit.go     &lt;span style=&#34;color: #75715e&#34;&gt;# Versioning handling.&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ file.go       &lt;span style=&#34;color: #75715e&#34;&gt;# Implement the file struct and the implicit trie.&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ hash.go       &lt;span style=&#34;color: #75715e&#34;&gt;# wrapper around jbenet/multihash&amp;#39;s implementation.&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ index.go      &lt;span style=&#34;color: #75715e&#34;&gt;# Implementation of add/rm/cat/checkout...&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ overlay.go    &lt;span style=&#34;color: #75715e&#34;&gt;# A write overlay of a immutable io.Reader for fuse.&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ stream.go     &lt;span style=&#34;color: #75715e&#34;&gt;# Stack encryption and compression.&lt;/span&gt;
â”œâ”€â”€ util              &lt;span style=&#34;color: #75715e&#34;&gt;# General utilities.&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ colors/       &lt;span style=&#34;color: #75715e&#34;&gt;# ASCII-terminal color code colorizing.&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ filelock/     &lt;span style=&#34;color: #75715e&#34;&gt;# Filelocking (used for the global repo)&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ ipfsutil/     &lt;span style=&#34;color: #75715e&#34;&gt;# Utils around the ipfs libraries.&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ log/          &lt;span style=&#34;color: #75715e&#34;&gt;# A colorful log-formatter for `logrus`&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ security/     &lt;span style=&#34;color: #75715e&#34;&gt;# security related utilites (scrypt simplified)&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ testutil/     &lt;span style=&#34;color: #75715e&#34;&gt;# Utils used in various tests.&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ trie/         &lt;span style=&#34;color: #75715e&#34;&gt;# A re-usable radix-trie for absolute file paths.&lt;/span&gt;
â”‚Â Â  â”œâ”€â”€ tunnel/       &lt;span style=&#34;color: #75715e&#34;&gt;# An io.ReadWriter that pipes through ECDH and AES.&lt;/span&gt;
â”‚Â Â  â””â”€â”€ std.go        &lt;span style=&#34;color: #75715e&#34;&gt;# Standard utils that should be in the standard lib.&lt;/span&gt;
â””â”€â”€ version.go        &lt;span style=&#34;color: #75715e&#34;&gt;# Semantic versioning of the brig util/library.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You might already have an idea how &lt;code&gt;brig&lt;/code&gt; is working by now. There&amp;rsquo;s a
command-line utility that speaks to a daemon that was somehow started, which
uses a store to &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;cat&lt;/code&gt; files. The daemon is also capable of mounting
a fuse filesystem, but before that it needs a repository to run in.
That&amp;rsquo;s the very rough picture, but to recap this we have this diagram to show
how the most important packages play together:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://disorganizer.github.io/blog/img/package_map.svg&#34; alt=&#34;Package map&#34; width=&#34;800px&#34;/&gt;&lt;/p&gt;

&lt;p&gt;From a slightly wider view, the communication between two repositories
is supposed too look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://disorganizer.github.io/blog/img/brig_arch.svg&#34; alt=&#34;Security architecture&#34; width=&#34;800px&#34;/&gt;&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t have any details to show here, simply because there is nothing to show
yet: The inter-repository communication simply does not exist yet. ðŸ˜‰&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s working now is mostly the fuse part (well, mostly, it already works like
a buggy and slow &lt;code&gt;encfs&lt;/code&gt;) and the versioning. Naturally the next goal is
to exchange some information between two &lt;code&gt;brig&lt;/code&gt; nodes.
The cool thing about the current architecture is naturally that we don&amp;rsquo;t need to
do any file exchange or storage ourselves, since &lt;code&gt;ipfs&lt;/code&gt; handles that for us.
As long as we manage to get the hashes and keys across XMPP, we successfully
share files - &lt;code&gt;ipfs&lt;/code&gt; will make sure to load it from the swarm.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s late here, so that&amp;rsquo;s it for today.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The write layer</title>
      <link>https://disorganizer.github.io/blog/post/the_write_layer/</link>
      <pubDate>Mon, 01 Feb 2016 00:03:36 +0100</pubDate>
      
      <guid>https://disorganizer.github.io/blog/post/the_write_layer/</guid>
      <description>&lt;p&gt;A bit more than a week since the last post, I&amp;rsquo;m getting worse again. Screw it.
Besides a lot of personal life stuff a major &amp;ldquo;problem&amp;rdquo; was solved: Writing to
files. Doesn&amp;rsquo;t sound like an impressive problem, I know.&lt;/p&gt;

&lt;p&gt;But how is &lt;code&gt;brig&lt;/code&gt; able to modify existing files by writing somewhere in them,
extending them or truncating them to some size? With the cli interface it&amp;rsquo;s not
much of a problem, a simple &lt;code&gt;brig add&lt;/code&gt; updates the file:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; -n &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;What now?&amp;#39;&lt;/span&gt; &amp;gt; file.txt 
$ brig add file.txt &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; brig cat file.txt
What now?
$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39; PARTY!&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; file.txt
$ brig add file.txt &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; brig cat file.txt
What now? PARTY!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The file is simply hashed and encrypted as a whole and is added to &lt;code&gt;ipfs&lt;/code&gt;.
A new entry in the version history will be created and the next &lt;code&gt;cat&lt;/code&gt;
gives the newer version.  But what about editing large files in the fuse layer?
Do we need to add the whole file on every edit over and over again?
That would be hella inefficient.&lt;/p&gt;

&lt;p&gt;The solution is kinda obvious, but the devil is in the details.
Every file handle that is opened from the outside via the fuse layer
internally opens a seekable read-only stream to the actual data in ipfs.
The decryption and retrieving from &lt;code&gt;ipfs&lt;/code&gt; is transparently managed, so
to the caller side it simply looks like a stream of the originally added file.
When a user writes data to the file, the data will be cached in memory a layer
over the original file. Once the file handle is closed, the written data will
be layered over the original read-only stream and added to &lt;code&gt;ipfs&lt;/code&gt;.
Since images are easier to grasp than text, here&amp;rsquo;s an example overlay:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://disorganizer.github.io/blog/img/write_overlay.svg&#34; alt=&#34;Overlay&#34; width=&#34;800px&#34;/&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s the current solution and it&amp;rsquo;s already a lot better than just re-adding
the file over and over. However, on every close the whole file is added anyways,
which makes editing large files inefficient. This might be helped in the future
by rolling hashes and direct writing to the blocks in &lt;code&gt;ipfs&lt;/code&gt;.
Another drawback is that every write is cached in memory, which can obviously
suck up your RAM in minutes. A viable solution would be to implement a &amp;ldquo;scratchpad&amp;rdquo;
on disk where encrypted chunks of data will be stored until the handle closes.&lt;/p&gt;

&lt;p&gt;As mentioned, the actual details are hairy. Implementing seekable decryption,
overlaying &lt;code&gt;io.Writers&lt;/code&gt; and similar stuff is a really great source for one-off
errors and other exotic bugs that are hard to find. To be more exact: there are
known bugs: Truncating to zero and then appending to the end (like &lt;code&gt;echo xyz &amp;gt;&amp;gt;
file.txt&lt;/code&gt;) produces a file with content zeroed everything before the appended
data.&lt;/p&gt;

&lt;p&gt;Speaking of bugs, there are plenty of todos until the next blog entry:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Make creating files in fuse possible:&lt;/strong&gt; This does not work currently for
unknown reasons.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Actually add old files to commit history:&lt;/strong&gt; Old hashes are silently discarded
and not unpinned. This will lead to lot of undeleteable garbage files.&lt;/li&gt;
&lt;li&gt;The encryption format needs a field to &lt;strong&gt;remember compression and a MAC&lt;/strong&gt; to
protect against forgery of the header data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;General code cleanup:&lt;/strong&gt; This involves running linters, removing debug messages
and cleaning up old hacks.&lt;/li&gt;
&lt;li&gt;There are no &lt;strong&gt;tests&lt;/strong&gt; for the fuse layer, but some bash scripts. These need
to be converted to go.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Long term goals:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before diving much deeper in the frontend part of &lt;code&gt;brig&lt;/code&gt; (&lt;code&gt;fuse&lt;/code&gt;, cli, etc.)
it&amp;rsquo;s probably a good idea to get on the &lt;code&gt;xmpp/bolt&lt;/code&gt; side and see if we can
persuade &lt;code&gt;brig&lt;/code&gt; to sync files over the net. Steep goals, but you can already
get the raw from &lt;code&gt;ipfs&lt;/code&gt; from another computer!&lt;/p&gt;

&lt;p&gt;The next blog post will give therefore an overview of the current architecture
and how the source is layout. Writing about that always help figuring out what
parts I screwed up. ðŸ˜ƒ&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fusing it together</title>
      <link>https://disorganizer.github.io/blog/post/fuse_it_together/</link>
      <pubDate>Tue, 19 Jan 2016 18:44:51 +0100</pubDate>
      
      <guid>https://disorganizer.github.io/blog/post/fuse_it_together/</guid>
      <description>&lt;p&gt;Another productive day, another update late in the night.&lt;/p&gt;

&lt;p&gt;A basic FUSE layer is integrated and is already able to display
the contents of a &lt;code&gt;util.trie.Trie&lt;/code&gt; as files and directories.
Reading and writing is not yet implemented, since that&amp;rsquo;s the
part where fuse and brig actually need to&amp;hellip; fuse.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a small session inside the fuse layer:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;Î» ~ â†’ brig mount /tmp/mount &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; /tmp/mount
Î» /tmp/mount â†’ touch hello  &lt;span style=&#34;color: #75715e&#34;&gt;# Creating file work. &lt;/span&gt;
Î» /tmp/mount â†’ cat hello    &lt;span style=&#34;color: #75715e&#34;&gt;# Although they contain weird stuff.&lt;/span&gt;
NaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNa
NaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNa
NaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNa
NaNaNaNaNaNaNaNaNaNaNaNaNa%
Î» /tmp/mount â†’ stat hello   &lt;span style=&#34;color: #75715e&#34;&gt;# Every file is 200 bytes in size currently.&lt;/span&gt;
File: â€žhelloâ€œ
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;...&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; Size: &lt;span style=&#34;color: #ae81ff&#34;&gt;200&lt;/span&gt;  &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;...&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
Î» /tmp/mount â†’ ls           &lt;span style=&#34;color: #75715e&#34;&gt;# Also enumerating the directory.&lt;/span&gt;
hello  &lt;span style=&#34;color: #f8f8f2&#34;&gt;test&lt;/span&gt;
Î» /tmp/mount â†’ mkdir new    &lt;span style=&#34;color: #75715e&#34;&gt;# Adding directories even somehow works.&lt;/span&gt;
hello  new  &lt;span style=&#34;color: #f8f8f2&#34;&gt;test&lt;/span&gt;
$ brig mount -u /tmp/mount
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It already feels like a pretty normal directory. Most of it&amp;rsquo;s code is inspired
from bolt-mount, which is described in this
&lt;a href=&#34;http://eagain.net/talks/bolt-mount/&#34;&gt;video&lt;/a&gt;.
As you may have noticed &lt;code&gt;mount&lt;/code&gt; and &lt;code&gt;mount -u&lt;/code&gt; are daemon commands already.
The only thing left to do now, is to read the actual stream and display
&lt;code&gt;store.Trie&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There was another small change which might have larger impact. Instead of generating
the AES-key from the hash of the first 8KB of a file, the key is randomly generated now
and stored in the index. This is probably saner/faster/more secure. But the actual
reason for this is: When modifying the file, the key might need to change, which
required re-encrypting the file, which in turn is very expensive.
For the prototype we probably need to re-add every file to &lt;code&gt;ipfs&lt;/code&gt; anyways, but now
we have more space for optimisations later on.&lt;/p&gt;

&lt;p&gt;Another nicety is that &lt;code&gt;brig add&lt;/code&gt; now works on directories. It simply adds all
files in it and &lt;code&gt;brig mkdir&lt;/code&gt; all directories. Also missing &lt;code&gt;/&lt;/code&gt; are prefixed
automatically and the repo path can be guessed from the source path.&lt;/p&gt;

&lt;p&gt;As usual, a list of targets for the next entry follows (this evolves into my TODO-list&amp;hellip;):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;brig rm&lt;/code&gt; which does obvious things.&lt;/li&gt;
&lt;li&gt;Make sure trie modifications in the index are locked.&lt;/li&gt;
&lt;li&gt;Read relevant metadata from the source file (size, mtime, etc.)&lt;/li&gt;
&lt;li&gt;Fix my sleep schedule.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Stacking closures and more</title>
      <link>https://disorganizer.github.io/blog/post/bolt_and_fingerprint/</link>
      <pubDate>Sat, 16 Jan 2016 18:44:51 +0100</pubDate>
      
      <guid>https://disorganizer.github.io/blog/post/bolt_and_fingerprint/</guid>
      <description>&lt;p&gt;A bit more than one day after the last post. Not too bad.
Basically, three smaller things happened since the last time.&lt;/p&gt;

&lt;p&gt;First, we now store files serialized as protobufs in the index persistently.
The index is just a BoltDB database file (which I can recommend, it&amp;rsquo;s nice).&lt;/p&gt;

&lt;p&gt;Secondly, the AES-key for each file is generated from the &lt;code&gt;sha512&lt;/code&gt; hash of the
first 8KB of a file. We don&amp;rsquo;t hash the full file for performance reasons, but
there is nothing stopping us from hashing the whole file, so we fully apply to
&lt;a href=&#34;https://en.wikipedia.org/wiki/Convergent_encryption&#34;&gt;Wikipedia&amp;rsquo;s definiton of convergent
encryption&lt;/a&gt;. The hash is
then processed by &lt;code&gt;scrypt&lt;/code&gt; with the filesize as salt. Currently, the key is
also stored in the index.&lt;/p&gt;

&lt;p&gt;Finally, the commandline interface was cleared up a bit.
We now use the &lt;code&gt;withXY&lt;/code&gt; pattern which are usually popular in tests.
Since we use &lt;code&gt;climax&lt;/code&gt; as commandline library, we need to pass a callback
handle for each subcommand we have (&lt;code&gt;add&lt;/code&gt;, &lt;code&gt;cat&lt;/code&gt;, etc.).
Almost all of them have in common that they need to talk to the daemon
and need a certain number of arguments to work.&lt;/p&gt;

&lt;p&gt;It would be nice to write something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;// ...&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;Handle&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;withArgCheck&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;needAtLeast&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;withDaemon&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;handleAdd&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)),&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;hellip; which is nicely possible by writing a function that returns a closure:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;CheckFunc&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;climax&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Context&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;withArgCheck&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;checker&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;CheckFunc&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;handler&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;climax&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;CmdHandler&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;climax&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;CmdHandler&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;climax&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Context&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;checker&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;ctx&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Success&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;BadArgs&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

		&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;handler&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;ctx&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;needAtLeast&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;min&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;CheckFunc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;climax&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Context&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;len(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;ctx&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Args&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;min&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #a6e22e&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Warningf&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Need at least %d arguments.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;min&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
			&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;BadArgs&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

		&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Success&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Oh, as an extra: We&amp;rsquo;re on GitHub now:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/disorganizer&#34;&gt;https://github.com/disorganizer&lt;/a&gt; (source)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://disorganizer.github.io/blog/index.html&#34;&gt;https://disorganizer.github.io/blog/index.html&lt;/a&gt; (blog)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;rsquo;s it for now. The next days should bring some of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make the index remember directories.&lt;/li&gt;
&lt;li&gt;Recursively add directories.&lt;/li&gt;
&lt;li&gt;A humble start on the FUSE layer.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>A brig step for mankind</title>
      <link>https://disorganizer.github.io/blog/post/first_steps/</link>
      <pubDate>Fri, 15 Jan 2016 01:13:07 -0700</pubDate>
      
      <guid>https://disorganizer.github.io/blog/post/first_steps/</guid>
      <description>&lt;p&gt;A small historic moment was achieved today: The very first file was added to
&lt;code&gt;brig&lt;/code&gt;. There was no way to get it out again, but hey - Progress comes in
steps. Luckily, just two hours later there was a &lt;code&gt;brig get&lt;/code&gt; command that
could retrieve the file again from &lt;code&gt;ipfs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is also my very first devlog entry, so&amp;hellip; Hi. I mainly write this to
remember what I did (and when) on the course of the project. Also it sometimes
is really useful to reflect on what kind of boolshit I wrote today. Ever
noticed that you get the best ideas doing arbitrary things like peeing? That&amp;rsquo;s
the same effect, I guess. If it&amp;rsquo;s fun to read for others&amp;hellip; that&amp;rsquo;s okay too.
I try to keep it updated after every more or less productive session.
That might mean daily, that might also mean once a week.&lt;/p&gt;

&lt;p&gt;So, back to the technical side of life. &lt;code&gt;brig add&lt;/code&gt; currently works a bit
confusing. It is supposed to read a regular file on the disk, compress and
encrypt it and add it to &lt;code&gt;ipfs&lt;/code&gt;. The encryption and compression layer uses
&lt;code&gt;io.Writer&lt;/code&gt; though, so we can&amp;rsquo;t just stack &lt;code&gt;io.Reader&lt;/code&gt; on top of each
other. Instead we need to use a nice little feature from the stdlib:
&lt;code&gt;io.Pipe()&lt;/code&gt;. This function returns a &lt;code&gt;io.Writer&lt;/code&gt; and a &lt;code&gt;io.Reader&lt;/code&gt;. Every
write on the writer produces a corresponding read on the reader - without internal
copying of the data. Yay. If you have a piece of API that needs a &lt;code&gt;io.Reader&lt;/code&gt;,
but you just have a &lt;code&gt;io.Writer&lt;/code&gt;, then &lt;code&gt;io.Pipe()&lt;/code&gt; should pop into your mind now.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how it looks in practice:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;NewFileReader&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;io&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Reader&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;io&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Reader&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;pr&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;pw&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;io&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Pipe&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;

	&lt;span style=&#34;color: #75715e&#34;&gt;// Setup the writer part:&lt;/span&gt;
	&lt;span style=&#34;color: #a6e22e&#34;&gt;wEnc&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;encrypt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;NewWriter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;pw&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;err&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color: #a6e22e&#34;&gt;wZip&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;compress&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;NewWriter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;wEnc&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

	&lt;span style=&#34;color: #75715e&#34;&gt;// Suck the reader empty and move it to `wZip`.&lt;/span&gt;
	&lt;span style=&#34;color: #75715e&#34;&gt;// Every write to wZip will be available as read in `pr`.&lt;/span&gt;
	&lt;span style=&#34;color: #66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #a6e22e&#34;&gt;wEnc&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Close&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
			&lt;span style=&#34;color: #a6e22e&#34;&gt;pw&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Close&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;}()&lt;/span&gt;

		&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;io&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Copy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;wZip&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color: #a6e22e&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Warningf&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;add: copy: %v&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}()&lt;/span&gt;

	&lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;pr&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;nil&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;rsquo;s all for today! For tomorrow a cleanup session is planned and the piece
of code that derives the AES-Key from an unencrypted file.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>